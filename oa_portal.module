<?php

include_once('oa_portal.theme.inc');

/**
 * Implements hook_init().
 */
function oa_portal_init() {
  drupal_add_css(drupal_get_path('module', 'oa_portal') . '/css/forms.css');
  drupal_add_css(drupal_get_path('module', 'oa_portal') . '/css/phases.css');
  drupal_add_js(drupal_get_path('module', 'oa_portal') . '/js/main.js');
}

/**
 * Implements hook_menu().
 */
function oa_portal_menu() {
  $items = array();

  $items['admin/portal'] = array(
    'title' => 'OA Portal Admin', 
    'page callback' => 'oa_portal_admin', 
    'access arguments' => array('administer site configuration'),
    'file' => 'oa_portal.admin.inc'
  );
  $items['portal'] = array(
    'title' => 'My OA Healthcare Documents', 
    'page callback' => 'oa_portal_page', 
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['update-password'] = array(
    'title' => 'Update Password', 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oa_portal_change_password_form'),
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.forms.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['portal/file/%'] = array(
    'title' => 'OA Portal Download File', 
    'page callback' => 'oa_portal_download_file',
    'page arguments' => array(2),
    'access arguments' => array('administer site configuration'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/createcoversheet/%'] = array(
    'title' => 'OA Portal Download File', 
    'page callback' => 'oa_portal_ucm_createcoversheet',
    'page arguments' => array(2),
    'access arguments' => array('administer site configuration'),
    'file' => 'oa_portal.pages.inc'
  );

  $items['portal/autosave'] = array(
    'title' => 'OA Portal Autosave', 
    'page callback' => 'oa_portal_autosave',
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $p = oa_portal_api();
  foreach ($p AS $pk => $phase) {
    foreach ($phase AS $sk => $section) {
      if (substr($sk, 0, 1) !== '#') {
        $items['portal/'. $pk .'/'. $sk] = array(
          'type' => MENU_CALLBACK,
          'title' => $section['#title'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array('oa_portal_'. $pk .'_'. $sk .'_form'),
          'access callback' => 'oa_portal_access',
          'access arguments' => array($pk, $sk),
          'file' => 'oa_portal.forms.inc',
        );
      }
    }
  }

  return $items;
}

/**
 * Implements hook_access().
 * Access callback for menu items
 */
function oa_portal_access($phase, $section) {
  global $user;
return TRUE;
  // Load portal data for user
  
  $p = oa_portal_api();
  // Acceptable s
  // Check if phase is unlocked
  if (in_array($p[$phase]['#status'], array('', 'open'))) {
    // Check if section has not yet been finalized
    if (in_array($p[$phase][$section]['#status'], array('', 'rejected'))) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_block().
 */
function oa_portal_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['oap_messages'] = array('info' => t('OA Portal: Messages'), 'cache' => BLOCK_CACHE_PER_USER);
      $blocks['oap_phase_status'] = array('info' => t('OA Portal: Phase status'), 'cache' => BLOCK_CACHE_PER_USER);
      return $blocks;
    break;
    case 'view':
      return array('content' => oa_portal_block_view($delta));
    break;
  }
}

/**
 * Invokes the theme associated with a block.
 *
 * @param string $delta
 *    The key identifier for a block.
 */
function oa_portal_block_view($delta) {
  global $user;
  include_once('oa_portal.blocks.inc');
  switch ($delta) {
    case 'oap_messages':
    case 'oap_phase_status':
      return theme($delta);
    break;
  }
}

/**
 ** Implementation of hook_theme();
 */
function oa_portal_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'oa_portal');
  return array(
    'oap_phase' => array(
      'template' => 'oap_phase',
      'path' => $path . '/templates',
      'arguments' => array('id' => NULL, 'title' => NULL, 'status' => NULL, 'phases' => NULL, 'completed' => NULL),
    ),
    'oap_phase_row' => array(
      'template' => 'oap_phase_row',
      'path' => $path . '/templates',
      'arguments' => array('link' => NULL, 'status' => NULL),
    ),
    'oap_messages' => array(
      'template' => 'oap_messages',
      'path' => $path . '/templates',
      'arguments' => array('tip' => NULL, 'count' => NULL, 'messages' => NULL),
    ),
    'oap_message_row' => array(
      'template' => 'oap_message_row',
      'path' => $path . '/templates',
      'arguments' => array('date' => NULL, 'teaser' => NULL, 'link' => NULL),
    ),
    'oap_phase_status' => array(
      'template' => 'oap_phase_status',
      'path' => $path . '/templates',
    ),
    'oap_tooltip' => array(
      'template' => 'oap_tooltip',
      'path' => $path . '/templates',
      'arguments' => array('status' => NULL, 'string' => NULL),
    ),
    'oap_doc_download' => array(
      'template' => 'oap_doc_download',
      'path' => $path . '/templates',
      'arguments' => array('docs' => NULL),
    ),
  );
}

/**
 * 
 */
function oa_portal_api() {
  $p = array();
  $p['p1'] = array(
    '#title' => t('Phase 1'),
    '#status' => '',
    'contact' => array(
      '#title' => t('Contact Information'),
      '#dependencies' => array(),
      '#status' => 'closed',
      '#data' => array(),
    ),
    'application' => array(
      '#title' => t('Application'),
      '#dependencies' => array(),
      '#status' => 'open',
      '#data' => array(),
    ),
    'checklist' => array(
      '#title' => t('Skills Checklist'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
  );
  $p['p2'] = array(
    '#title' => t('Phase 2'),
    '#status' => '',
    'professional_orgs' => array(
      '#title' => t('Professional Organizations'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'licensure_certs' => array(
      '#title' => t('Licensure Certifications'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'background_reference' => array(
      '#title' => t('Background/Reference Check'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'capabilities' => array(
      '#title' => t('Capabilities Questionnaire'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'policies' => array(
      '#title' => t('Policies & Agreements'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'medical' => array(
      '#title' => t('Medical Authorization and Disclosures'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'competency' => array(
      '#title' => t('Competency Test'),
      '#status' => '',
    ),
  );
  $p['p3'] = array(
    '#title' => t('Phase 3'),
    '#status' => '',
    'paycheck' => array(
      '#title' => t('Paycheck Method'),
      '#phase' => 3,
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'w4' => array(
      '#title' => t('W4'),
      '#phase' => 3,
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'i9' => array(
      '#title' => t('I-9'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'eeo' => array(
      '#title' => t('EEO Form'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
    'work_policy' => array(
      '#title' => t('Work Policy'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
    ),
  );
  return $p;
}

/**
 * SOAP interface
 */
function oa_portal_soap($method, $params, $debug = FALSE) {
  ini_set("soap.wsdl_cache_enabled", "0");
  $wsdl = array(
    'createcoversheet' => 'OAServices.wsdl',
    'createpdfform' => 'OAServices.wsdl',
    'oacheckin' => 'OAServices.wsdl',
    'profileview' => 'OAServices.wsdl',
    'CheckInUniversal' => 'CheckIn.wsdl',
    'DocInfoByName' => 'DocInfo.wsdl',
    'GetFileByID' => 'GetFile.wsdl',
    'GetFileByName' => 'GetFile.wsdl',
    'ComplianceCheck' => 'OAServices.wsdl',
    'AdvancedSearch' => 'Search.wsdl',
  );
  ini_set('display_errors', 1);
  $wsdl = dirname(__FILE__) .'/wsdl/'. $wsdl[$method];

  $soap_params = array(
    'login' => 'weblogic',
    'password' => '0ATraining',
    'trace' => 1,
    'exceptions' => 0
  );

  $client = new SoapClient($wsdl, $soap_params);

  try {
    $response = $client->{$method}($params);
  }
  catch(SoapFault $e){
    // handle issues returned by the web service
    oa_portal_503($e);
  }
  catch(Exception $e){
    // handle PHP issues with the request
    oa_portal_500($e);
  }

  if ($debug) {
    dsm($params, $method . ' $params');
    dsm($client, $method . ' $client');
    dsm($response, $method . ' $response');
  }
  return $response;
}

/**
 * Test ping server
 */
function oa_portal_soap_ping_server() {
  $results = oa_portal_soap('pingServer', array());
  dsm($results, 'SOAP $results');
}

function oa_portal_soap_file_form($form_state) {
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['upload'] = array(
    '#type' => 'file', 
    '#title' => t('Post a file to UCM'),
    '#size' => 40,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Upload',
  );
  return $form;
}

function oa_portal_soap_file_form_submit($form, &$form_state) {
  if (isset($_FILES['files']) && is_uploaded_file($_FILES['files']['tmp_name']['upload'])) {
    $filepath = $_FILES['files']['tmp_name']['upload'];
    $filesize = $_FILES['files']['size']['upload'];
    $filename = $_FILES['files']['name']['upload'];
    $handle = fopen($filepath, "r");
    $contents = fread($handle, $filesize);
    fclose($handle);

    $params = array(
      'dDocType' => 'Rmax',
      'dDocAuthor' => 'weblogic',
      'dDocAccount' => 'Recruit/QA',
      'dSecurityGroup' => 'Form',
      'dDocTitle' => 'Test from RP',
      'dDocName' => 'RP' . time(),
      'primaryFile' =>array(
        'fileName'=> $_FILES['files']['name']['upload'],
        'fileContent' => $contents),
    );

    $results = oa_portal_soap('CheckInUniversal', $params);
    dsm($results, 'SOAP $results for file upload');
  }
}

/**
 * Implementation of hook_fapi_validation_rules
 */
function oa_portal_fapi_validation_rules() {
  return array(
    'not_none' => array(
      'callback' => 'oa_portal_rule_not_none',
      'error_msg' => 'You must select a value for %field'
    ),
  );
}

/**
 * Rule callback for not_none
 */
function oa_portal_rule_not_none($value) {
  return !((string) $value == 'none');
}

function oa_portal_get_modality_formtypes($phase, $id) {
  $params = array(
    'complianceRecordID' => $id,
    'doNotUpdate' => 1,
  );
  $results = oa_portal_soap('ComplianceCheck', $params);
  return explode(',', $results->ComplianceCheckResult->{'OAPhase'. $phase .'MissingFormIDs'});
}

/**
 * Implements hook_ajax_validate_pass().
 */
function oa_portal_ajax_validate_pass(&$form, &$form_state, &$data, &$pass) {
/*
  if ($form['form_id']['#value'] == 'oa_portal_p1_checklist_form') {
dsm($data, '$data in validate_pass');
    dsm($form, 'oa_portal_ajax_validate_pass $form');
  }
  return TRUE;
*/
}

function oa_portal_ucm_oacheckin($formtype, $fields) {
  global $user;
  $account = user_load($user->uid);
  $rmaxid = $account->rmaxid;
  $params = array(
    'dDocName' => $rmaxid ."_". $formtype,
    // @TODO When is this Form vs FormSecure?
    'dSecurityGroup' => 'Form',
    'dDocAuthor' => 'weblogic',
    'dDocAccount' => 'Recruit/QA',
    'dDocType' => 'Rmax',
    'dDocTitle' => $formtype ."-". $rmaxid,
    'xContentType' => "Form",
    'xFormType' => $formtype,
    'xRM_ID' => $rmaxid,
    'xStatus' => 'Pending Review',
    'xComments' => '',
    'xRejectReason' => '',
    'xRejectOther' => '',
    'xSuccessAudit' => '',
    'fields' => $fields,
  );
  return TRUE;
  
  $result = oa_portal_soap('oacheckin', $params, TRUE);
  return ($result->oacheckinResult == 'something') ? TRUE : $result->oacheckinResult;
}

/**
 * Get file contents by dID
 */
function oa_portal_ucm_getfilebyid($dID) {
  $result = oa_portal_soap('GetFileByID', array('dID' => $dID), TRUE);
  return $result->GetFileByIDResult;;
}

/**
 * Get file contents by formtype (dDocName)
 */
function oa_portal_ucm_getfilebyname($rmaxid, $formtype) {
  $result = oa_portal_soap('GetFileByName', array('dDocName' => $rmaxid .'_'. $formtype), TRUE);
  return $result->GetFileByNameResult;
}

/**
 * Get file info by dID
 */
function oa_portal_ucm_docinfobyid($dID) {
  $result = oa_portal_soap('DocInfoByID', array('dID' => $dID), TRUE);
  return (get_class($result) == 'SoapFault') ? FALSE : $result->DocInfoByIDResult;;
}

/**
 * Get file info by formtype (dDocName)
 */
function oa_portal_ucm_docinfobyame($rmaxid, $formtype) {
  $result = oa_portal_soap('DocInfoByName', array('dDocName' => $rmaxid .'_'. $formtype));
  return (get_class($result) == 'SoapFault') ? FALSE : $result->DocInfoByNameResult;
}

/**
 * Get RMax profile by RMaxID
 */
function oa_portal_ucm_profileview($rmaxid) {
  $result = oa_portal_soap('profileview', array('schViewName' => 'vOA_Profile', 'whereClause' => "rmaxid='". $rmaxid ."'"));
  if (get_class($result) == 'SoapFault') {
dsm('Found a SoapFault where we shouldnt have one');
    return FALSE;
  }
  $profile = $result->profileviewResult->profiledata;
  $profile->name = $profile->fname .' '. $profile->lname;
  $address = $profile->addressline1;
  $address .= ($profile->addressline2) ? ' '. $profile->addressline2 : NULL;
  $address .= ($profile->addressline3) ? ' '. $profile->addressline3 : NULL;
  $address .= ' '. $profile->city .', '. $profile->state .' '. $profile->postal;
  $profile->address = $address;
  return $profile;
}


function oa_portal_ucm_createpdfform($rmaxid, $formtype, $fields) {
  $params = array(
    'rmaxid' => $rmaxid,
    'formid' => $formtype,
    'extraProps' => array(),
  );
  foreach ($fields AS $k => $v) {
    $params['extraProps']['property'][] = array(
      'name' => $k,
      'value' => $v,
    );
  }
  $result = oa_portal_soap('createpdfform', $params, TRUE);
  return (get_class($result) == 'SoapFault') ? FALSE : $result->createpdfformResult;
}

/**
 * Get file info by formtype (dDocName)
 */
function oa_portal_ucm_advanced_search_docs_not_missing($rmaxid, $formtypes) {
  $formtypesquery = 'xFormType <matches> `'. implode($formtypes, '` <or> xFormType <matches> `') .'`';
  $query = 'xRM_ID <matches> `'. $rmaxid .'` <AND> <not>xStatus <matches> `Missing` <AND>('. $formtypesquery .')';
  $result = oa_portal_soap('AdvancedSearch', array('queryText' => $query, 'sortField' => 'dDocTitle', 'sortOrder' => 'Asc', 'resultCount' => '20'));
  if (get_class($result) == 'SoapFault') {
    return FALSE;
  }
  return (is_array($result->AdvancedSearchResult->SearchResults)) ? $result->AdvancedSearchResult->SearchResults : array($result->AdvancedSearchResult->SearchResults);
}

function oa_portal_500($e) {
dsm($e, '$e');
  drupal_set_header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error');

  watchdog('500 internal server error', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_REQUEST['destination'])) {
    $_REQUEST['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_500', ''));
  if ($path && $path != $_GET['q']) {
    // Set the active item in case there are tabs to display, or other
    // dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    drupal_set_title(t('Internal Server Error'));
    $return = t('The requested page could not be delivered. Please try again later.');
  }

  // To conserve CPU and bandwidth, omit the blocks.
  print theme('page', $return, FALSE);
}

function oa_portal_503($e) {
dsm($e, '$e');
  drupal_set_header($_SERVER['SERVER_PROTOCOL'] . ' 503 Service Unavailable');

  watchdog('503 service unavailable', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_REQUEST['destination'])) {
    $_REQUEST['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_503', ''));
  if ($path && $path != $_GET['q']) {
    // Set the active item in case there are tabs to display, or other
    // dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    drupal_set_title(t('Service Unavailable'));
    $return = t('The requested page could not be delivered. Please try again later.');
  }

  // To conserve CPU and bandwidth, omit the blocks.
  print theme('page', $return, FALSE);
}
