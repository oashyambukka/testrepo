<?php

include_once('oa_portal.candidate.class.inc');
include_once('oa_portal.theme.inc');

/**
 * Implements hook_init().
 */
function oa_portal_init() {
  global $user;

  $path = drupal_get_path('module', 'oa_portal');
  drupal_add_css($path . '/css/misc.css');
  if (arg(0) == 'portal') {
    drupal_add_css($path . '/css/forms.css');
    drupal_add_css($path . '/css/phases.css');
    drupal_add_js($path . '/js/jquery.ba-untils.min.js');
    drupal_add_js($path . '/js/main.js');
  }

  if ($user->uid && arg(0) != 'update-password' && !user_access('administer portal')) {
    $account = user_load($user->uid);
    $data = unserialize($account->data);
    if ($data['must_update_pass']) {
      unset($_REQUEST['destination']);
      drupal_goto('update-password');
    }
  }
}

/**
 * Implements hook_menu().
 */
function oa_portal_menu() {
  $items = array();

  $items['admin/portal'] = array(
    'title' => 'OA Portal Admin',
    'page callback' => 'oa_portal_admin', 
    'access arguments' => array('administer site configuration'),
    'file' => 'oa_portal.admin.inc'
  );
  $items['portal'] = array(
    'title' => 'My OA Healthcare Documents',
    'page callback' => 'oa_portal_page', 
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/docs'] = array(
    'title' => 'My Documents',
    'page callback' => 'oa_portal_docs_page',
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/forms'] = array(
    'title' => 'Forms Library',
    'page callback' => 'oa_portal_forms_page',
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/tutorial'] = array(
    'title' => 'Tutorial and FAQs',
    'page callback' => 'oa_portal_tutorial_page',
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/messages'] = array(
    'title' => 'My Message Center',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oa_portal_messages_page'),
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/messages/%'] = array(
    'title' => 'My Message Center',
    'page callback' => 'oa_portal_message_page',
    'page arguments' => array(2),
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['update-password'] = array(
    'title' => 'Update Password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oa_portal_change_password_form'),
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.forms.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['portal/file/%'] = array(
    'title' => 'OA Portal Download File',
    'page callback' => 'oa_portal_download_file',
    'page arguments' => array(2),
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/createcoversheet/%'] = array(
    'title' => 'OA Portal Download File',
    'page callback' => 'oa_portal_ucm_createcoversheet',
    'page arguments' => array(2),
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/autosave'] = array(
    'title' => 'OA Portal Autosave',
    'page callback' => 'oa_portal_autosave',
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $p = oa_portal_forms_info();
  foreach ($p AS $pk => $phase) {
    foreach (element_children($phase) AS $sk) {
      $section = $phase[$sk];
      $items['portal/'. $pk .'/'. $sk] = array(
        'type' => MENU_CALLBACK,
        'title' => $section['#title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('oa_portal_'. $pk .'_'. $sk .'_form'),
        'access callback' => 'oa_portal_candidate_access',
        'access arguments' => array($pk, $sk),
        'file' => 'oa_portal.forms.inc',
      );
    }
  }
  return $items;
}

/**
 * Implements hook_perm()
 */
function oa_portal_perm() {
  return array('administer portal', 'access portal');
}

/**
 * Access callback for menu items
 */
function oa_portal_candidate_access($phase, $section) {
  global $user;
  $account = user_load($user->uid);
  if (user_access('administer portal', $account)) {
    return TRUE;
  }

  // Per-Candidate access checking
  $candidate = get_candidate($account->rmaxid);
  // May require this eventually
  //$candidate->load_compliance();

  // If previous sections are marked as approved, grant access
  if ($section = 'p1' || ($section == 'p2' && $candidate->compliance['p1']['approved_date']) || ($section == 'p3' && $candidate->compliance['p2']['approved_date'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_block().
 */
function oa_portal_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['oap_candidate_menu'] = array('info' => t('OA Portal: Candidate Menu'), 'cache' => BLOCK_NO_CACHE);
      $blocks['oap_messages'] = array('info' => t('OA Portal: Messages'), 'cache' => BLOCK_CACHE_PER_USER);
      $blocks['oap_phase_status'] = array('info' => t('OA Portal: Phase status'), 'cache' => BLOCK_CACHE_PER_USER);
      return $blocks;
    break;
    case 'view':
      switch ($delta) {
        case 'oap_candidate_menu':
          return oa_portal_block_view_oap_candidate_menu();
        default:
          return array('content' => oa_portal_block_view($delta));
      }
    break;
  }
}

/**
 * Invokes the theme associated with a block.
 *
 * @param string $delta
 *    The key identifier for a block.
 */
function oa_portal_block_view($delta) {
  global $user;
  include_once('oa_portal.blocks.inc');
  switch ($delta) {
    case 'oap_candidate_menu':
    case 'oap_messages':
    case 'oap_phase_status':
      return theme($delta);
    break;
  }
}

function oa_portal_block_view_oap_candidate_menu() {
  global $user;
  if ($user->uid) {
    $account = user_load($user->uid);
    $candidate = get_candidate($account->rmaxid); 
    return array('subject' => $candidate->profile->name, 'content' => theme('oap_candidate_menu'));
  }
  return array();
}

/**
 ** Implementation of hook_theme();
 */
function oa_portal_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'oa_portal');
  return array(
    'oap_phase' => array(
      'template' => 'oap_phase',
      'path' => $path . '/templates',
      'arguments' => array('id' => NULL, 'title' => NULL, 'status' => NULL, 'phases' => NULL, 'completed' => NULL),
    ),
    'oap_phase_row' => array(
      'template' => 'oap_phase_row',
      'path' => $path . '/templates',
      'arguments' => array('link' => NULL, 'status' => NULL),
    ),
    'oap_messages' => array(
      'template' => 'oap_messages',
      'path' => $path . '/templates',
      'arguments' => array('messages' => NULL, 'tip' => NULL, 'count' => NULL),
    ),
    'oap_message_row' => array(
      'template' => 'oap_message_row',
      'path' => $path . '/templates',
      'arguments' => array('date' => NULL, 'subject' => NULL, 'body' => NULL, 'link' => NULL),
    ),
    'oap_message_page' => array(
      'arguments' => array('date' => NULL, 'subject' => NULL, 'body' => NULL),
    ),
    'oap_messages_page' => array(
      'template' => 'oap_messages_page',
      'path' => $path . '/templates',
      'arguments' => array('form' => NULL),
    ),
    'oap_candidate_menu' => array(
      'template' => 'oap_candidate_menu',
      'path' => $path . '/templates',
    ),
    'oap_phase_status' => array(
      'template' => 'oap_phase_status',
      'path' => $path . '/templates',
    ),
    'oap_tooltip' => array(
      'template' => 'oap_tooltip',
      'path' => $path . '/templates',
      'arguments' => array('status' => NULL, 'body' => NULL),
    ),
    'oap_doc_download' => array(
      'template' => 'oap_doc_download',
      'path' => $path . '/templates',
      'arguments' => array('docs' => NULL),
    ),
  );
}

/**
 * Implements hook_user().
 */
function oa_portal_user($op, &$edit, &$account, $category = NULL) {
  // Mark new accounts that must change their passwords upon first login
  switch ($op) {
    case 'insert':
      $edit['must_update_pass'] = 1;
    break;
  }
}

/**
 * Main source of Portal phase and section defaults
 */
function oa_portal_forms_info() {
  $p = array();
  
  $p['p1'] = array(
    '#title' => t('Phase 1'),
    '#status' => 'open',
    'contact' => array(
      '#title' => t('Contact Information'),
      '#status' => 'closed',
    ),
    'application' => array(
      '#title' => t('Application'),
      '#formtypes' => array(2),
    ),
    'checklist' => array(
      '#title' => t('Skills Checklist'),
      '#formtypes' => array_keys(oa_portal_get_category_formids('Skills Checklists')),
    ),
  );
  $certifications = array_keys(oa_portal_get_category_formids('Certifications'));
  $licensures = array_keys(oa_portal_get_category_formids('Licensure'));
  
  $p['p2'] = array(
    '#title' => t('Phase 2'),
    'professional_orgs' => array(
      '#title' => t('Professional Organizations'),
      '#status' => 'read-only',
    ),
    'licensure_certs' => array(
      '#title' => t('Licensure Certifications'),
      '#formtypes' => array_merge($certifications, $licensures),
    ),
    'background_reference' => array(
      '#title' => t('Background/Reference Check'),
      '#formtypes' => array(233, 476, 477),
    ),
    'capabilities' => array(
      '#title' => t('Capabilities Questionnaire'),
      '#formtypes' => array(5),
    ),
    'policies' => array(
      '#title' => t('Policies & Agreements'),
      '#formtypes' => array(256, 433, 432),
    ),
    'medical' => array(
      '#title' => t('Medical Authorization and Disclosures'),
      // Missing others.
      '#formtypes' => array(263),
    ),
    'competency' => array(
      '#title' => t('Competency Test'),
      '#status' => 'read-only',
    ),
  );
  $p['p3'] = array(
    '#title' => t('Phase 3'),
    '#status' => 'locked',
    'paycheck' => array(
      '#title' => t('Paycheck Method'),
      '#phase' => 3,
      '#status' => '',
      '#formtypes' => array(536, 537),
    ),
    'w4' => array(
      '#title' => t('W4'),
      '#phase' => 3,
      '#status' => '',
      '#formtypes' => array(474),
    ),
    'i9' => array(
      '#title' => t('I-9'),
      '#status' => '',
      '#formtypes' => array(461),
    ),
    'eeo' => array(
      '#title' => t('EEO Form'),
      '#status' => '',
      '#formtypes' => array(1),
    ),
    'work_policy' => array(
      '#title' => t('Work Policy'),
      '#status' => '',
      '#formtypes' => array(466),
    ),
  );
  return $p;
}

/**
 * SOAP interface
 */
function oa_portal_soap($method, $params, $debug = FALSE) {
  ini_set("soap.wsdl_cache_enabled", "0");
  $wsdl = array(
    'ComplianceCheck' => 'OAServices.wsdl',
    'createcoversheet' => 'OAServices.wsdl',
    'createpdfform' => 'OAServices.wsdl',
    'drupalcounts' => 'OAServices.wsdl',
    'formview' => 'OAServices.wsdl',
    'oacheckin' => 'OAServices.wsdl',
    'oasendemail' =>  'OAServices.wsdl',
    'profileview' => 'OAServices.wsdl',
    'CheckInUniversal' => 'CheckIn.wsdl',
    'DocInfoByName' => 'DocInfo.wsdl',
    'GetFileByID' => 'GetFile.wsdl',
    'GetFileByName' => 'GetFile.wsdl',
    'AdvancedSearch' => 'Search.wsdl',
  );
  ini_set('display_errors', 1);
  $wsdl = dirname(__FILE__) .'/wsdl/'. $wsdl[$method];

  $soap_params = array(
    'login' => 'weblogic',
    'password' => '0ATraining',
    'trace' => 1,
  );

  try {
    ini_set('default_socket_timeout', 10);
    $client = @new SoapClient($wsdl, $soap_params);
    $response = $client->{$method}($params);
  }
  catch(SoapFault $e){
    // handle issues returned by the web service
    if (!$debug) {
      oa_portal_503($e);
    }
  }
  catch(Exception $e){
    // handle PHP issues with the request
    if (!$debug) {
      oa_portal_500($e);
    }
  }

  if ($debug) {
    dsm($params, $method . ' $params');
    dsm($client, $method . ' $client');
    dsm($response, $method . ' $response');
  }

  return $response;
}

/**
 * Demonstrate how to upload files
 */
function oa_portal_soap_file_form_submit($form, &$form_state) {
  if (isset($_FILES['files']) && is_uploaded_file($_FILES['files']['tmp_name']['upload'])) {
    $filepath = $_FILES['files']['tmp_name']['upload'];
    $filesize = $_FILES['files']['size']['upload'];
    $filename = $_FILES['files']['name']['upload'];
    $handle = fopen($filepath, "r");
    $contents = fread($handle, $filesize);
    fclose($handle);

    $params = array(
      'dDocType' => 'Rmax',
      'dDocAuthor' => 'weblogic',
      'dDocAccount' => 'Recruit/QA',
      'dSecurityGroup' => 'Form',
      'dDocTitle' => 'Test from RP',
      'dDocName' => 'RP' . time(),
      'primaryFile' =>array(
        'fileName'=> $_FILES['files']['name']['upload'],
        'fileContent' => $contents),
    );

    $results = oa_portal_soap('CheckInUniversal', $params);
    dsm($results, 'SOAP $results for file upload');
  }
}

/**
 * Implementation of hook_fapi_validation_rules
 */
function oa_portal_fapi_validation_rules() {
  return array(
    'not_none' => array(
      'callback' => 'oa_portal_rule_not_none',
      'error_msg' => 'You must select a value for %field'
    ),
  );
}

/**
 * Rule callback for not_none
 */
function oa_portal_rule_not_none($value) {
  return !((string) $value == 'none');
}
/**
 * Not used
function oa_portal_ucm_oacheckin($formtype, $fields) {
  global $user;
  $account = user_load($user->uid);
  $rmaxid = $account->rmaxid;
  $params = array(
    'dDocName' => $rmaxid ."_". $formtype,
    // @TODO When is this Form vs FormSecure?
    'dSecurityGroup' => 'Form',
    'dDocAuthor' => 'weblogic',
    'dDocAccount' => 'Recruit/QA',
    'dDocType' => 'Rmax',
    'dDocTitle' => $formtype ."-". $rmaxid,
    'xContentType' => "Form",
    'xFormType' => $formtype,
    'xRM_ID' => $rmaxid,
    'xStatus' => 'Pending Review',
    'xComments' => '',
    'xRejectReason' => '',
    'xRejectOther' => '',
    'xSuccessAudit' => '',
    'fields' => $fields,
  );
  return TRUE;
  
  $result = oa_portal_soap('oacheckin', $params, TRUE);
  return ($result->oacheckinResult == 'something') ? TRUE : $result->oacheckinResult;
}
*/

/**
 * Get file contents by dID. Used by oa_portal_download_file($dDocName)
 */
function oa_portal_ucm_getfilebyname($dDocName) {
  $result = oa_portal_soap('GetFileByName', array('dDocName' => $dDocName, 'revisionSelectionMethod' => 'Latest'), TRUE);
  return $result->GetFileByNameResult;
}

/**
 * Get file contents by formtype (dDocName). Unused.
function oa_portal_ucm_rmax_getfilebyname($rmaxid, $formtype) {
  $result = oa_portal_soap('GetFileByName', array('dDocName' => $rmaxid .'_'. $formtype), TRUE);
  return $result->GetFileByNameResult;
}
*/

/**
 * Get file info by dID. Unused.
 *
function oa_portal_ucm_docinfobyid($dID) {
  $result = oa_portal_soap('DocInfoByID', array('dID' => $dID), TRUE);
  return (get_class($result) == 'SoapFault') ? FALSE : $result->DocInfoByIDResult;;
}
*/

/**
 * Get file info by formtype (dDocName). Unused./
 *
function oa_portal_ucm_docinfobyame($rmaxid, $formtype) {
  $result = oa_portal_soap('DocInfoByName', array('dDocName' => $rmaxid .'_'. $formtype));
  return (get_class($result) == 'SoapFault') ? FALSE : $result->DocInfoByNameResult;
}
*/

/**
 * Used by many forms to populate PDF templates in UCM
 */
function oa_portal_ucm_createpdfform($rmaxid, $formtype, $fields) {
  $params = array(
    'rmaxid' => $rmaxid,
    'formid' => $formtype,
    'extraProps' => array(),
  );
  foreach ($fields AS $k => $v) {
    $params['extraProps']['property'][] = array(
      'name' => $k,
      'value' => $v,
    );
  }
  //$result = oa_portal_soap('createpdfform', $params, TRUE);
  $result = oa_portal_soap('createpdfform', $params);
  return (get_class($result) == 'SoapFault') ? FALSE : $result->createpdfformResult;
}

function oa_portal_html_to_pdf_string($rmaxid, $formtype, $values, $form) {
  $to_render = oa_portal_html_to_pdf_change_type($forms, $values);
  return drupal_render($to_render);
}

function oa_portal_html_to_pdf_change_type($felements, $values) {
  foreach ($felements AS $ek => $element) {
    if ($children = element_children($elements)) {
      $child_values = $values[$ek];
      $children = oa_portal_html_to_pdf_change_type($children, $child_values);
    }
    elseif ($felements[$ek]['#type']) {
      $felements[$ek]['#type'] = 'pdf_'. $felement['#type'];
      $felements[$ek]['#value'] = $values[$ek];
    }
  }
  return $felements;
}

/**
 * Custom 500 error page
 */
function oa_portal_500($e = NULL) {
  drupal_set_header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error');
  if ($e) {
    watchdog('500 internal server error', check_plain($_GET['q']) .' <pre>'. print_r($e, TRUE) .'</pre>', NULL, WATCHDOG_WARNING);
  }
  else {
    watchdog('500 internal server error', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
  }

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_REQUEST['destination'])) {
    $_REQUEST['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_500', ''));
  if ($path && $path != $_GET['q']) {
    // Set the active item in case there are tabs to display, or other
    // dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    drupal_set_title(t('Internal Server Error'));
    $return = t('The requested page could not be delivered. Please try again later.');
    if ($e) {
      $return .= '<div class="error-message">'. $e->getMessage() .'</div>';
    }
  }

  // To conserve CPU and bandwidth, omit the blocks.
  print theme('page', $return, FALSE);
  exit();
}

/**
 * Custom 503 error page
 */
function oa_portal_503($e = NULL) {
  drupal_set_header($_SERVER['SERVER_PROTOCOL'] . ' 503 Service Unavailable');
  if ($e) {
    watchdog('503 service unavailable', check_plain($_GET['q']) .' <pre>'. print_r($e, TRUE) .'</pre>', NULL, WATCHDOG_WARNING);
  }
  else {
    watchdog('503 service unavailable', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
  }
  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_REQUEST['destination'])) {
    $_REQUEST['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_503', ''));
  if ($path && $path != $_GET['q']) {
    // Set the active item in case there are tabs to display, or other
    // dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path);
  }
  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    drupal_set_title(t('Service Unavailable'));
    $return = t('The requested page could not be delivered. Please try again later.');
    if ($e) {
      $return .= '<div class="error-message">'. $e->getMessage() .'</div>';
    }
  }

  // To conserve CPU and bandwidth, omit the blocks.
  print theme('page', $return, FALSE);
  exit();
}


/**
 * Get the autosaved form at a particular path for a user.
 *
 * @param string $form_id
 *   The form_id of the form.
 * @param string $path
 *   The the internal Drupal path where the form is located
 * @param string $uid
 *   Drupal UID of the user
 * @return
 *   An array containing the serialized values of the autosaved form and the timestamp of when the form was autosaved.
 */
function oa_portal_get_autosaved_form($form_id, $path, $uid) {
  $result = db_query("SELECT form_id, serialized, timestamp FROM {autosaved_forms} WHERE form_id = '%s' AND path = '%s' AND uid = %d", $form_id, $path, $uid);
  while ($data = db_fetch_object($result)) {
    $form['serialized'] = $data->serialized;
    $form['timestamp'] = $data->timestamp;
  }
  return $form;
}

/**
 * Get the unread messages for a user.
 *
 * @param integer $rmaxid
 *   The RMax ID of the user.
 * @param integer/string $read
 *   The read/unread status of the message (Unread = 0, Has been read = 1, All = 'all')
 * @param integer $limit
 *   The Limit for the query
 * @return
 *   An array containing the individual read/unread messages
 */
function oa_portal_get_messages($rmaxid, $read = 0, $limit = 100) {
  if ($read == 'all') {
    $result = db_query("SELECT * FROM {ucm_messages} WHERE rmaxid = %d ORDER BY timestamp DESC LIMIT $limit", $rmaxid, $limit);
  }
  else {
    $result = db_query("SELECT * FROM {ucm_messages} WHERE rmaxid = %d AND was_read = %d ORDER BY timestamp DESC LIMIT $limit", $rmaxid, $read, $limit);
  }
  $messages = array();
  while ($data = db_fetch_object($result)) {
    $messages[] = $data;
  }
  return (count($messages)) ? $messages : NULL;
}

/**
 * Get a specific message for a user.
 *
 * @param integer $rmaxid
 *   The RMax ID of the user.
 * @param integer $msg_id
 *   The Message ID
 * @return
 *   An object containing the individual message
 */
function oa_portal_get_message($rmaxid, $msg_id) {
  $result = db_query("SELECT * FROM {ucm_messages} WHERE rmaxid = %d AND msg_id = %d LIMIT 1", $rmaxid, $msg_id);
  while ($message = db_fetch_object($result)) {
    return $message;
  }
  return NULL;
}

/**
 * Mark a specific message as read for a user.
 *
 * @param integer $rmaxid
 *   The RMax ID of the user.
 * @param integer $msg_id
 *   The Message ID
 * @return
 *   An object containing the individual message
 */
function oa_portal_mark_message_read($msg_id) {
  global $user;
  $account = user_load($user->uid);
  db_query("UPDATE {ucm_messages} SET was_read = 1 WHERE rmaxid = %d AND msg_id = %d LIMIT 1", $account->rmaxid, $msg_id);

  // @TODO
  if ($this_was_ajax) {
    drupal_json('200');
    exit();
  }
}

/**
 * Implements hook_form_HOOK_alter().
 */
function oa_portal_form_user_pass_alter(&$form, &$form_state) {
  $form['#submit'] = array('oa_portal_user_pass_submit');
}

/**
 * Submission callback for password reset form
 */
function oa_portal_user_pass_submit($form, &$form_state) {
  global $language;
  $account = $form_state['values']['account'];
  oa_portal_user_mail_notify('password_reset', $account, $language);

  // Must update their password
  user_save($account, array('must_update_pass' => 1));
  watchdog('user', 'OAP - Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
  drupal_set_message(t('Further instructions have been sent to your e-mail address.'));

  $form_state['redirect'] = 'user';
  return;
}

/**
 * Create and send a notification email when a certain operation happens on the given user account.
 *
 * @param $op
 *  The operation being performed on the account.  Possible values:
 *  'register_admin_created': Welcome message for user created by the admin
 *  'password_reset': Password recovery request
 *
 * @param $account
 *  The user object of the account being notified.  Must contain at
 *  least the fields 'uid', 'name', and 'mail'.
 */
function oa_portal_user_mail_notify($op, $account) {
  $params['account'] = $account;
  $language = $language ? $language : user_preferred_language($account);
  $variables = user_mail_tokens($account, $language);

  // Send message via UCM
  $params = array(
    'to' => $account->mail,
    'from' => 'test@onassignment.com',
    'messagetype' => 'BASICSAMPLE',
    'rmaxid' => $account->rmaxid,
    'subject' => _user_mail_text($op .'_subject', $language, $variables),
    'payload' => _user_mail_text($op .'_body', $language, $variables),
    'processor' => 'smtp',
  );
  $result = oa_portal_soap('oasendemail', $params, TRUE);
}


/**
 * $form_category possible values:
 *  Certifications
 *  Skills Checklists
 *  Licensure
 */
function oa_portal_get_category_formids($form_category) {
  $params = array(
    'schViewName' => 'vOA_FORMTYPES',
    'whereClause' => "formcategory = '$form_category'",
  );
  $result = oa_portal_soap('formview', $params);
  $forms = array();
  foreach ($result->formviewResult->formdata AS $form) {
    $forms[$form->formid] = $form->formname;
  }
  return $forms;
}
