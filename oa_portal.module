<?php

include_once('oa_portal.theme.inc');

/**
 * Implements hook_init().
 */
function oa_portal_init() {
  drupal_add_css(drupal_get_path('module', 'oa_portal') . '/css/forms.css');
  drupal_add_css(drupal_get_path('module', 'oa_portal') . '/css/phases.css');
  drupal_add_js(drupal_get_path('module', 'oa_portal') . '/js/main.js');
}

/**
 * Implements hook_menu().
 */
function oa_portal_menu() {
  $items = array();

  $items['admin/portal'] = array(
    'title' => 'OA Portal Admin', 
    'page callback' => 'oa_portal_admin', 
    'access arguments' => array('administer site configuration'),
    'file' => 'oa_portal.admin.inc'
  );
  $items['portal'] = array(
    'title' => 'My OA Healthcare Documents', 
    'page callback' => 'oa_portal_page', 
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['update-password'] = array(
    'title' => 'My OA Healthcare Documents', 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oa_portal_change_password_form'),
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.forms.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['portal/file/%'] = array(
    'title' => 'OA Portal Download File', 
    'page callback' => 'oa_portal_download_file',
    'page arguments' => array(2),
    'access arguments' => array('administer site configuration'),
    'file' => 'oa_portal.pages.inc'
  );
  $items['portal/autosave'] = array(
    'title' => 'OA Portal Autosave', 
    'page callback' => 'oa_portal_autosave',
    'access arguments' => array('access portal'),
    'file' => 'oa_portal.pages.inc'
    'type' => MENU_CALLBACK,
  );

  $p = oa_portal_api();
  foreach ($p AS $pk => $phase) {
    foreach ($phase AS $sk => $section) {
      if (substr($sk, 0, 1) !== '#') {
        $items['portal/'. $pk .'/'. $sk] = array(
          'type' => MENU_CALLBACK,
          'title' => $section['#title'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array('oa_portal_'. $pk .'_'. $sk .'_form'),
          'access callback' => 'oa_portal_access',
          'access arguments' => array($pk, $sk),
          'file' => 'oa_portal.forms.inc',
        );
      }
    }
  }

  return $items;
}

/**
 * Implements hook_access().
 * Access callback for menu items
 */
function oa_portal_access($phase, $section) {
  global $user;
return TRUE;
  // Load portal data for user
  
  $p = oa_portal_api();
  // Acceptable s
  // Check if phase is unlocked
  if (in_array($p[$phase]['#status'], array('', 'open'))) {
    // Check if section has not yet been finalized
    if (in_array($p[$phase][$section]['#status'], array('', 'rejected'))) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_block().
 */
function oa_portal_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['oap_messages'] = array('info' => t('OA Portal: Messages'), 'cache' => BLOCK_CACHE_PER_USER);
      $blocks['oap_phase_status'] = array('info' => t('OA Portal: Phase status'), 'cache' => BLOCK_CACHE_PER_USER);
      return $blocks;
    break;
    case 'view':
      return array('content' => oa_portal_block_view($delta));
    break;
  }
}

/**
 * Invokes the theme associated with a block.
 *
 * @param string $delta
 *    The key identifier for a block.
 */
function oa_portal_block_view($delta) {
  global $user;
  include_once('oa_portal.blocks.inc');
  switch ($delta) {
    case 'oap_messages':
    case 'oap_phase_status':
      return theme($delta);
    break;
  }
}

/**
 ** Implementation of hook_theme();
 */
function oa_portal_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'oa_portal');
  return array(
    'oap_phase' => array(
      'template' => 'oap_phase',
      'path' => $path . '/templates',
      'arguments' => array('id' => NULL, 'title' => NULL, 'status' => NULL, 'phases' => NULL, 'completed' => NULL),
    ),
    'oap_phase_row' => array(
      'template' => 'oap_phase_row',
      'path' => $path . '/templates',
      'arguments' => array('link' => NULL, 'status' => NULL),
    ),
    'oap_messages' => array(
      'template' => 'oap_messages',
      'path' => $path . '/templates',
      'arguments' => array('tip' => NULL, 'count' => NULL, 'messages' => NULL),
    ),
    'oap_message_row' => array(
      'template' => 'oap_message_row',
      'path' => $path . '/templates',
      'arguments' => array('date' => NULL, 'teaser' => NULL, 'link' => NULL),
    ),
    'oap_phase_status' => array(
      'template' => 'oap_phase_status',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * 
 */
function oa_portal_api() {
  $p = array();
  $p['p1'] = array(
    '#title' => t('Phase 1'),
    '#status' => '',
    'contact' => array(
      '#title' => t('Contact Information'),
      '#dependencies' => array(),
      '#status' => 'closed',
      '#data' => array(),
      '#docs' => array(),
    ),
    'application' => array(
      '#title' => t('Application'),
      '#dependencies' => array(),
      '#status' => 'open',
      '#data' => array(),
      '#docs' => array(),
    ),
    'checklist' => array(
      '#title' => t('Skills Checklist'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
  );
  $p['p2'] = array(
    '#title' => t('Phase 2'),
    '#status' => '',
    'professional_orgs' => array(
      '#title' => t('Professional Organizations'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'licensure_certs' => array(
      '#title' => t('Licensure Certifications'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'background_reference' => array(
      '#title' => t('Background/Reference Check'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'capabilities' => array(
      '#title' => t('Capabilities Questionnaire'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'policies' => array(
      '#title' => t('Policies & Agreements'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'medical' => array(
      '#title' => t('Medical Authorization and Disclosures'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'competency' => array(
      '#title' => t('Competency Test'),
      '#status' => '',
    ),
  );
  $p['p3'] = array(
    '#title' => t('Phase 3'),
    '#status' => '',
    'paycheck' => array(
      '#title' => t('Paycheck Method'),
      '#phase' => 3,
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'w4' => array(
      '#title' => t('W4'),
      '#phase' => 3,
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'i9' => array(
      '#title' => t('I-9'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'eeo' => array(
      '#title' => t('EEO Form'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
    'work_policy' => array(
      '#title' => t('Work Policy'),
      '#dependencies' => array(),
      '#status' => '',
      '#data' => array(),
      '#docs' => array(),
    ),
  );
  return $p;
}

/**
 * SOAP interface
 */
function oa_portal_soap($method, $params, $debug = FALSE) {
  $wsdl = array(
    'pingServer' => 'ping.wsdl',
    'CheckInUniversal' => 'CheckIn.wsdl',
    'GetFileByID' => 'GetFile.wsdl',
  );
  ini_set('display_errors', 1);
  $wsdl = dirname(__FILE__) .'/wsdl/'. $wsdl[$method];

  $soap_params = array(
    'login' => 'weblogic',
    'password' => '0ATraining',
    'trace' => 1,
    'exceptions' => 0
  );

  $client = new SoapClient($wsdl, $soap_params);
  $result = $client->{$method}($params);

  if ($debug) {
    dsm($params, $method . ' $params');
    dsm($client, $method . ' $client');
    dsm($result, $method . ' $result');
  }
  return $result;
}

/**
 * Test ping server
 */
function oa_portal_soap_ping_server() {
  $results = oa_portal_soap('pingServer', array());
  dsm($results, 'SOAP $results');
}

function oa_portal_soap_file_form($form_state) {
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['upload'] = array(
    '#type' => 'file', 
    '#title' => t('Post a file to UCM'),
    '#size' => 40,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Upload',
  );
  return $form;
}

function oa_portal_soap_file_form_submit($form, &$form_state) {
  if (isset($_FILES['files']) && is_uploaded_file($_FILES['files']['tmp_name']['upload'])) {
    $filepath = $_FILES['files']['tmp_name']['upload'];
    $filesize = $_FILES['files']['size']['upload'];
    $filename = $_FILES['files']['name']['upload'];
    $handle = fopen($filepath, "r");
    $contents = fread($handle, $filesize);
    fclose($handle);

    $params = array(
      'dDocType' => 'Rmax',
      'dDocAuthor' => 'weblogic',
      'dDocAccount' => 'Recruit/QA',
      'dSecurityGroup' => 'Form',
      'dDocTitle' => 'Test from RP',
      'dDocName' => 'RP' . time(),
      'primaryFile' =>array(
        'fileName'=> $_FILES['files']['name']['upload'],
        'fileContent' => $contents),
    );

    $results = oa_portal_soap('CheckInUniversal', $params);
    dsm($results, 'SOAP $results for file upload');
  }
}
